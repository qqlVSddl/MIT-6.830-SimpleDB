package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private final JoinPredicate joinPredicate;
    private OpIterator opIterator1, opIterator2;
    private Tuple t1 = null, t2 = null;


    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // done
        joinPredicate = p;
        opIterator1 = child1;
        opIterator2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // done
        return joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // done
        return opIterator1.getTupleDesc().getFieldName(joinPredicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // done
        return opIterator2.getTupleDesc().getFieldName(joinPredicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // done
        return TupleDesc.merge(opIterator1.getTupleDesc(), opIterator2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // done
        super.open();
        opIterator1.open();
        opIterator2.open();
        if (opIterator1.hasNext()) {
            t1 = opIterator1.next();
        }
    }

    public void close() {
        // done
        super.close();
        opIterator1.close();
        opIterator2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // done
        opIterator1.rewind();
        opIterator2.rewind();
    }


    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // done
        while (opIterator1.hasNext() || opIterator2.hasNext()) {
            if (!opIterator2.hasNext()) {   // the condition of while makes opIterator1.hasNext() = true
                t1 = opIterator1.next();
                opIterator2.rewind();
            }
            while (opIterator2.hasNext()) {
                t2 = opIterator2.next();
                if (joinPredicate.filter(t1, t2)) {
                    TupleDesc m_td = TupleDesc.merge(t1.getTupleDesc(), t2.getTupleDesc());
                    Tuple ret = new Tuple(m_td);
                    int n1 = t1.getTupleDesc().numFields(), n2 = t2.getTupleDesc().numFields();
                    for (int i = 0; i < n1; ++i) {
                        ret.setField(i, t1.getField(i));
                    }
                    for (int i = 0; i < n2; ++i) {
                        ret.setField(i + n1, t2.getField(i));
                    }
                    return ret;
                }
            }
        }
        return null;

    }

    @Override
    public OpIterator[] getChildren() {
        // done
        return new OpIterator[]{opIterator1, opIterator2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // done, not sure right
        opIterator1 = children[0];
        opIterator2 = children[1];
    }

}